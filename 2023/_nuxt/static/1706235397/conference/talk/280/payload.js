__NUXT_JSONP__("/conference/talk/280", (function(a){return {data:[{speechData:{id:280,begin_time:"2023-09-02T05:05:00Z",end_time:"2023-09-02T05:35:00Z",is_remote:false,location:"4-r0",youtube_id:a,title:"Asyncio Evolved: Enhanced Exception Handling with Python 3.11 TaskGroups",category:"PRAC",language:"ENEN",python_level:"INTERMEDIATE",recording_policy:true,abstract:"With the release of Python 3.11 in October 2022, PEP 654 \"Exception Groups and except\" was accepted, and asyncio.TaskGroup() was added. This enhancement of exception and cancellation handling has allowed asyncio to evolve more flexibly, addressing the existing issues with asyncio APIs, such as insufficient cancellation and exception handling in asyncio.gather.\r\n\r\nIn this talk, I would like to discuss the problems of existing asyncio APIs and how the newly introduced asyncio.TaskGroup() solves these issues. Attendees will learn about the improved way of handling exceptions and cancellations using asyncio.TaskGroup(), enabling them to write more efficient and robust asynchronous code with Python 3.11.",detailed_description:"###  Description\r\nIn Python 3.11, asyncio.TaskGroup() and asyncio timeout context managers were added. Additionally, get_event_loop() was deprecated in 3.10, and loop objects were further obscured, making the already less intimidating asyncio even less scary.  \r\n\r\nI will discuss the basic usage of asyncio in Python 3.11, which has become simpler and more flexible, focusing on exception and cancellation handling.  \r\n\r\nI hope that this will be helpful for those who choose asyncio when writing web applications using ASGI frameworks or Python scripts where asynchronous I\u002FO is useful.\r\n\r\n### By the end of this talk, attendees will be able to:\r\n\r\n* Understand the limitations of the existing asyncio APIs, specifically regarding cancellation and exception handling in asyncio.gather.\r\n* Learn how Python 3.11's asyncio.TaskGroup() overcomes these limitations and improves exception and cancellation handling.\r\n* Apply the new asyncio.TaskGroup() features in their asynchronous programming to build more resilient and efficient applications.",slide_link:a,slido_embed_link:"https:\u002F\u002Fapp.sli.do\u002Fevent\u002F82FmhiuGkmauvFCLfixYzG",hackmd_embed_link:"https:\u002F\u002Fhackmd.io\u002F@pycontw\u002FHJjQ8imT3",speakers:[{thumbnail_url:"https:\u002F\u002Ftw.pycon.org\u002Fprs\u002Fmedia\u002Fcache\u002F73\u002Fc3\u002F73c31fe60a5d6535975535bcb4132fa0.jpg",name:"Junya Fukuda",github_profile_url:"https:\u002F\u002Fgithub.com\u002Fjrfk",twitter_profile_url:"https:\u002F\u002Ftwitter.com\u002FJunyaFff",facebook_profile_url:a,bio:"Develops \"LOVOT\", a family-like robot that promotes the ability to love, at GROOVE X, Inc. He has spoken at PyCon JP, DjangoCongress JP, EuroPython, and other events. As a community activity, he participates in the management of GeekLab Nagano. Co-author of \"Python Practical Recipes (2022 Gijutsu Hyoron Co., Ltd.)\". Translation of \"Expert Python Programming - Fourth Edition\". Likes beer, camping, and asyncio."}],event_type:"talk"}}],fetch:{},mutations:[]}}("")));